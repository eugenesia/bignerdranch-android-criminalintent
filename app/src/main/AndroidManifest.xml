<?xml version="1.0" encoding="utf-8"?>
<manifest package="com.bignerdranch.android.criminalintent"
          xmlns:android="http://schemas.android.com/apk/res/android"
          android:versionCode="1"
          android:versionName="1.0">

  <!-- Here, Android expects you to ask permission because it wants to enforce
    some accountability. You tell Android that you need to access external
    storage, and Android will then tell the user that this is one of the things
    your application does when they try to install it. That way, nobody is
    surprised when you start saving things to their SD card.

    In Android 4.4, KitKat, they loosened this restriction. Since
    Context.getExternalFilesDir(String) returns a folder that is specific to
    your app, it makes sense that you would want to be able to read and write
    files that live there. So on Android 4.4 (API 19) and up, you do not need
    this permission for this folder. (But you still need it for other kinds of
    external storage.)

    The maxSdkVersion attribute makes it so that your app only asks for this
    permission on versions of Android that are older than API 19, Android
    KitKat.

    Note that you are only asking to read external storage. There is also a
    WRITE_EXTERNAL_STORAGE permission, but you do not need it. You will not be
    writing anything to external storage: The camera app will do that for you.
  -->
  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
    android:maxSdkVersion="18" />

  <!-- Uses camera but not mandatory. -->
  <uses-feature android:name="android.hardware.camera"
    android:required="false" />

  <uses-sdk
    android:minSdkVersion="8"
    android:targetSdkVersion="17"/>

  <application
    android:allowBackup="true"
    android:icon="@drawable/ic_launcher"
    android:label="@string/app_name"
    android:theme="@style/AppTheme">

    <activity android:name=".CrimeListActivity">
      <intent-filter>
        <action android:name="android.intent.action.MAIN" />
        <category android:name="android.intent.category.LAUNCHER" />
      </intent-filter>
    </activity>

    <!-- parentActivityName enables the "up" button for hierarchical navigation,
      to go back "up" to CrimeListActivity. -->
    <activity
      android:name=".CrimePagerActivity"
      android:label="@string/app_name"
      android:parentActivityName=".CrimeListActivity">
    </activity>

  </application>

</manifest>
